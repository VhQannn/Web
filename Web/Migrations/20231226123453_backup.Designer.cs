// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.DbConnection;

#nullable disable

namespace Web.Migrations
{
    [DbContext(typeof(WebContext))]
    [Migration("20231226123453_backup")]
    partial class backup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Web.DbConnection.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assignment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("date")
                        .HasColumnName("deadline");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("AssignmentId")
                        .HasName("PK__Assignme__DA891814BDA59FE2");

                    b.HasIndex("UserId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("Web.DbConnection.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<DateTime?>("CommentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("comment_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_comment_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CommentId")
                        .HasName("PK__Comments__E79576872B1CF8B0");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Web.DbConnection.Conversation", b =>
                {
                    b.Property<int>("ConversationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("conversation_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConversationId"));

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("created_time");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isActive")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isArchived")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_time");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ConversationId")
                        .HasName("PK__Conversa__311E7E9ABB4D7030");

                    b.HasIndex("UserId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("Web.DbConnection.ConversationMember", b =>
                {
                    b.Property<int>("ConversationMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("conversation_member_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConversationMemberId"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("int")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime?>("JoinTime")
                        .HasColumnType("datetime")
                        .HasColumnName("join_time");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ConversationMemberId")
                        .HasName("PK__Conversa__A390F78D2CE8C4FD");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("Conversation_Members", (string)null);
                });

            modelBuilder.Entity("Web.DbConnection.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("course_description");

                    b.Property<string>("CourseTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("course_title");

                    b.Property<string>("CourseraEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("coursera_email");

                    b.Property<string>("CourseraPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("coursera_password");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CourseId")
                        .HasName("PK__Courses__8F1EF7AED9538176");

                    b.HasIndex("UserId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Web.DbConnection.MarkReport", b =>
                {
                    b.Property<int>("MarkReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("mark_report_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MarkReportId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<double?>("MarkScore")
                        .HasColumnType("float")
                        .HasColumnName("mark_score");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("MarkReportId")
                        .HasName("PK__mark_rep__AF0F18C1553D607B");

                    b.HasIndex("UserId");

                    b.ToTable("mark_report", (string)null);
                });

            modelBuilder.Entity("Web.DbConnection.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("message_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("int")
                        .HasColumnName("conversation_id");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message_text");

                    b.Property<string>("MessageType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("message_type");

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("receiver_id");

                    b.Property<int>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("sender_id");

                    b.Property<DateTime?>("SentTime")
                        .HasColumnType("datetime")
                        .HasColumnName("sent_time");

                    b.HasKey("MessageId")
                        .HasName("PK__Messages__0BBF6EE6844778CC");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Web.DbConnection.MessageReadStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<int?>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("message_id");

                    b.Property<DateTime?>("ReadTime")
                        .HasColumnType("datetime")
                        .HasColumnName("read_time");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("StatusId")
                        .HasName("PK__Message___3683B531800A81B0");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("Message_Read_Status", (string)null);
                });

            modelBuilder.Entity("Web.DbConnection.Multimedium", b =>
                {
                    b.Property<int>("MultimediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("multimedia_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MultimediaId"));

                    b.Property<int?>("AssignmentId")
                        .HasColumnType("int")
                        .HasColumnName("assignment_id");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("course_id");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("MarkReportId")
                        .HasColumnType("int")
                        .HasColumnName("mark_report_id");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("message_id");

                    b.Property<string>("MultimediaType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("multimedia_type");

                    b.Property<string>("MultimediaUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("multimedia_url");

                    b.Property<int?>("PostCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("post_category_id");

                    b.Property<int?>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<int?>("QuestionTemplatesDetailId")
                        .HasColumnType("int")
                        .HasColumnName("question_templates_detail_id");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("MultimediaId")
                        .HasName("PK__multimed__C5029F69D77E13EB");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("MarkReportId");

                    b.HasIndex("MessageId");

                    b.HasIndex("PostCategoryId");

                    b.HasIndex("PostId");

                    b.HasIndex("QuestionTemplatesDetailId");

                    b.HasIndex("UserId");

                    b.ToTable("multimedia", (string)null);
                });

            modelBuilder.Entity("Web.DbConnection.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("message");

                    b.Property<string>("RedirectUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("redirect_url");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__E059842FBC4CC11B");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Web.DbConnection.ParentComment", b =>
                {
                    b.Property<int>("ParentCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("parent_comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParentCommentId"));

                    b.Property<DateTime?>("CommentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("comment_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<int?>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ParentCommentId")
                        .HasName("PK__Parent_C__D23CEB6D95D7F8B2");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Parent_Comment", (string)null);
                });

            modelBuilder.Entity("Web.DbConnection.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("payment_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("receiver_id");

                    b.Property<int?>("RelatedId")
                        .HasColumnType("int")
                        .HasColumnName("related_id");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("service_type");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payments__ED1FC9EABF099B34");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Web.DbConnection.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("post_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<DateTime>("DateSlot")
                        .HasColumnType("date")
                        .HasColumnName("date_slot");

                    b.Property<int?>("PostCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("post_category_id");

                    b.Property<string>("PostContent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("post_content");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("date")
                        .HasColumnName("post_date");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("post_title");

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("receiver_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("TimeSlot")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("time_slot");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("PostId")
                        .HasName("PK__Posts__3ED78766E8CE2A40");

                    b.HasIndex("PostCategoryId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Web.DbConnection.PostCategory", b =>
                {
                    b.Property<int>("PostCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("post_category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostCategoryId"));

                    b.Property<string>("PostCategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("post_category_name");

                    b.HasKey("PostCategoryId")
                        .HasName("PK__Post_Cat__B2316F122BCEB804");

                    b.HasIndex(new[] { "PostCategoryName" }, "UQ__Post_Cat__8CA54ABEE9E15AE4")
                        .IsUnique();

                    b.ToTable("Post_Category", (string)null);
                });

            modelBuilder.Entity("Web.DbConnection.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("purchase_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseId"));

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasColumnName("amount");

                    b.Property<int?>("BuyerId")
                        .HasColumnType("int")
                        .HasColumnName("buyer_id");

                    b.Property<DateTime?>("PurchaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("purchase_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ToolId")
                        .HasColumnType("int")
                        .HasColumnName("tool_id");

                    b.HasKey("PurchaseId")
                        .HasName("PK__Purchase__87071CB92C08F35E");

                    b.HasIndex("BuyerId");

                    b.HasIndex("ToolId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("Web.DbConnection.QuestionTemplate", b =>
                {
                    b.Property<int>("QuestionTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("question_template_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionTemplateId"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("QuestionTemplateCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("question_template_code");

                    b.HasKey("QuestionTemplateId")
                        .HasName("PK__question__7010F8899E0D0916");

                    b.ToTable("question_templates", (string)null);
                });

            modelBuilder.Entity("Web.DbConnection.QuestionTemplateDetailQaid", b =>
                {
                    b.Property<int>("QuestionTemplatesDetailQaidsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("question_templates_detail_qaids_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionTemplatesDetailQaidsId"));

                    b.Property<int>("QAid")
                        .HasColumnType("int")
                        .HasColumnName("q_aid");

                    b.Property<int>("QuestionTemplatesDetailId")
                        .HasColumnType("int")
                        .HasColumnName("question_templates_detail_id");

                    b.HasKey("QuestionTemplatesDetailQaidsId")
                        .HasName("PK__Question__3214EC27A4E22912");

                    b.HasIndex("QuestionTemplatesDetailId");

                    b.ToTable("Question_template_detail_qaids", (string)null);
                });

            modelBuilder.Entity("Web.DbConnection.QuestionTemplatesDetail", b =>
                {
                    b.Property<int>("QuestionTemplatesDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("question_templates_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionTemplatesDetailId"));

                    b.Property<int>("QId")
                        .HasColumnType("int")
                        .HasColumnName("q_id");

                    b.Property<string>("QText")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("q_text");

                    b.Property<int>("QuestionTemplateId")
                        .HasColumnType("int")
                        .HasColumnName("question_template_id");

                    b.HasKey("QuestionTemplatesDetailId")
                        .HasName("PK__question__50851D49666E7B47");

                    b.HasIndex("QuestionTemplateId");

                    b.ToTable("question_templates_detail", (string)null);
                });

            modelBuilder.Entity("Web.DbConnection.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("rating_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comments");

                    b.Property<int?>("RaterId")
                        .HasColumnType("int")
                        .HasColumnName("rater_id");

                    b.Property<DateTime?>("RatingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("rating_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RatingValue")
                        .HasColumnType("int")
                        .HasColumnName("rating_value");

                    b.Property<int?>("RelatedId")
                        .HasColumnType("int")
                        .HasColumnName("related_id");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("service_type");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int")
                        .HasColumnName("supporter_id");

                    b.HasKey("RatingId")
                        .HasName("PK__Ratings__D35B278B540964C3");

                    b.HasIndex("RaterId");

                    b.HasIndex("SupporterId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Web.DbConnection.Tool", b =>
                {
                    b.Property<int>("ToolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tool_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToolId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("SellerId")
                        .HasColumnType("int")
                        .HasColumnName("seller_id");

                    b.Property<int?>("ToolCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("tool_category_id");

                    b.Property<string>("ToolDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tool_description");

                    b.Property<string>("ToolName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("tool_name");

                    b.Property<decimal>("ToolPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("tool_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ToolId")
                        .HasName("PK__Tools__28DE264FB28D074B");

                    b.HasIndex("SellerId");

                    b.HasIndex("ToolCategoryId");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("Web.DbConnection.ToolCategory", b =>
                {
                    b.Property<int>("ToolCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tool_category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ToolCategoryId"));

                    b.Property<string>("ToolCategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("tool_category_name");

                    b.HasKey("ToolCategoryId")
                        .HasName("PK__Tool_Cat__77A0093DA0850FDD");

                    b.HasIndex(new[] { "ToolCategoryName" }, "UQ__Tool_Cat__E74C77BE8B4FAA40")
                        .IsUnique();

                    b.ToTable("Tool_Category", (string)null);
                });

            modelBuilder.Entity("Web.DbConnection.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Facebook")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("facebook");

                    b.Property<bool?>("IsVerify")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isVerify")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Otpcode")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("OTPCode")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("OtpcreateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("OTPCreateTime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("user_type");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK__Users__B9BE370F4036364C");

                    b.HasIndex(new[] { "Username" }, "UQ__Users__F3DBC5726D062E2B")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Web.DbConnection.UserTool", b =>
                {
                    b.Property<int>("UserToolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_tool_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserToolId"));

                    b.Property<string>("KeyCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("key_code");

                    b.Property<int?>("ToolId")
                        .HasColumnType("int")
                        .HasColumnName("tool_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("UserToolId")
                        .HasName("PK__User_Too__2ED437F3017703F1");

                    b.HasIndex("ToolId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Tools", (string)null);
                });

            modelBuilder.Entity("Web.DbConnection.WithdrawalRequest", b =>
                {
                    b.Property<int>("WithdrawalRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("withdrawal_request_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WithdrawalRequestId"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comments");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    b.Property<DateTime?>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("request_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<int?>("SupporterId")
                        .HasColumnType("int")
                        .HasColumnName("supporter_id");

                    b.HasKey("WithdrawalRequestId")
                        .HasName("PK__Withdraw__199972BE7AB5E2AC");

                    b.HasIndex("PaymentId");

                    b.HasIndex("SupporterId");

                    b.ToTable("WithdrawalRequests");
                });

            modelBuilder.Entity("Web.DbConnection.Assignment", b =>
                {
                    b.HasOne("Web.DbConnection.User", "User")
                        .WithMany("Assignments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Assignmen__user___10566F31");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web.DbConnection.Comment", b =>
                {
                    b.HasOne("Web.DbConnection.ParentComment", "ParentComment")
                        .WithMany("Comments")
                        .HasForeignKey("ParentCommentId")
                        .HasConstraintName("FK__Comments__parent__114A936A");

                    b.HasOne("Web.DbConnection.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Comments__user_i__123EB7A3");

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web.DbConnection.Conversation", b =>
                {
                    b.HasOne("Web.DbConnection.User", "User")
                        .WithMany("Conversations")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Conversat__user___5BAD9CC8");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web.DbConnection.ConversationMember", b =>
                {
                    b.HasOne("Web.DbConnection.Conversation", "Conversation")
                        .WithMany("ConversationMembers")
                        .HasForeignKey("ConversationId")
                        .IsRequired()
                        .HasConstraintName("FK__Conversat__conve__6AEFE058");

                    b.HasOne("Web.DbConnection.User", "User")
                        .WithMany("ConversationMembers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Conversat__user___6BE40491");

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web.DbConnection.Course", b =>
                {
                    b.HasOne("Web.DbConnection.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Courses__user_id__1332DBDC");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web.DbConnection.MarkReport", b =>
                {
                    b.HasOne("Web.DbConnection.User", "User")
                        .WithMany("MarkReports")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__mark_repo__user___395884C4");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web.DbConnection.Message", b =>
                {
                    b.HasOne("Web.DbConnection.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .IsRequired()
                        .HasConstraintName("FK__Messages__messag__5E8A0973");

                    b.HasOne("Web.DbConnection.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK__Messages__sender__5F7E2DAC");

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Web.DbConnection.MessageReadStatus", b =>
                {
                    b.HasOne("Web.DbConnection.Message", "Message")
                        .WithMany("MessageReadStatuses")
                        .HasForeignKey("MessageId")
                        .HasConstraintName("FK__Message_R__messa__6442E2C9");

                    b.HasOne("Web.DbConnection.User", "User")
                        .WithMany("MessageReadStatuses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Message_R__user___65370702");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web.DbConnection.Multimedium", b =>
                {
                    b.HasOne("Web.DbConnection.Assignment", "Assignment")
                        .WithMany("Multimedia")
                        .HasForeignKey("AssignmentId")
                        .HasConstraintName("FK__multimedi__assig__4C6B5938");

                    b.HasOne("Web.DbConnection.Course", "Course")
                        .WithMany("Multimedia")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK__multimedi__cours__4D5F7D71");

                    b.HasOne("Web.DbConnection.MarkReport", "MarkReport")
                        .WithMany("Multimedia")
                        .HasForeignKey("MarkReportId")
                        .HasConstraintName("FK__multimedi__mark___498EEC8D");

                    b.HasOne("Web.DbConnection.Message", "Message")
                        .WithMany("Multimedia")
                        .HasForeignKey("MessageId")
                        .HasConstraintName("FK__multimedi__messa__6166761E");

                    b.HasOne("Web.DbConnection.PostCategory", "PostCategory")
                        .WithMany("Multimedia")
                        .HasForeignKey("PostCategoryId")
                        .HasConstraintName("FK__multimedi__post___4A8310C6");

                    b.HasOne("Web.DbConnection.Post", "Post")
                        .WithMany("Multimedia")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK__multimedi__post___4B7734FF");

                    b.HasOne("Web.DbConnection.QuestionTemplatesDetail", "QuestionTemplatesDetail")
                        .WithMany("Multimedia")
                        .HasForeignKey("QuestionTemplatesDetailId")
                        .HasConstraintName("FK__multimedi__quest__489AC854");

                    b.HasOne("Web.DbConnection.User", "User")
                        .WithMany("Multimedia")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__multimedi__user___47A6A41B");

                    b.Navigation("Assignment");

                    b.Navigation("Course");

                    b.Navigation("MarkReport");

                    b.Navigation("Message");

                    b.Navigation("Post");

                    b.Navigation("PostCategory");

                    b.Navigation("QuestionTemplatesDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web.DbConnection.Notification", b =>
                {
                    b.HasOne("Web.DbConnection.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__user___236943A5");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web.DbConnection.ParentComment", b =>
                {
                    b.HasOne("Web.DbConnection.Post", "Post")
                        .WithMany("ParentComments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK__Parent_Co__post___14270015");

                    b.HasOne("Web.DbConnection.User", "User")
                        .WithMany("ParentComments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Parent_Co__user___151B244E");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web.DbConnection.Payment", b =>
                {
                    b.HasOne("Web.DbConnection.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Payments__user_i__160F4887");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web.DbConnection.Post", b =>
                {
                    b.HasOne("Web.DbConnection.PostCategory", "PostCategory")
                        .WithMany("Posts")
                        .HasForeignKey("PostCategoryId")
                        .HasConstraintName("FK__Posts__post_cate__17036CC0");

                    b.HasOne("Web.DbConnection.User", "Receiver")
                        .WithMany("PostReceivers")
                        .HasForeignKey("ReceiverId")
                        .HasConstraintName("FK__Posts__receiver___17F790F9");

                    b.HasOne("Web.DbConnection.User", "User")
                        .WithMany("PostUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Posts__user_id__18EBB532");

                    b.Navigation("PostCategory");

                    b.Navigation("Receiver");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web.DbConnection.Purchase", b =>
                {
                    b.HasOne("Web.DbConnection.User", "Buyer")
                        .WithMany("Purchases")
                        .HasForeignKey("BuyerId")
                        .HasConstraintName("FK__Purchases__buyer__19DFD96B");

                    b.HasOne("Web.DbConnection.Tool", "Tool")
                        .WithMany("Purchases")
                        .HasForeignKey("ToolId")
                        .HasConstraintName("FK__Purchases__tool___1AD3FDA4");

                    b.Navigation("Buyer");

                    b.Navigation("Tool");
                });

            modelBuilder.Entity("Web.DbConnection.QuestionTemplateDetailQaid", b =>
                {
                    b.HasOne("Web.DbConnection.QuestionTemplatesDetail", "QuestionTemplatesDetail")
                        .WithMany("QuestionTemplateDetailQaids")
                        .HasForeignKey("QuestionTemplatesDetailId")
                        .IsRequired()
                        .HasConstraintName("FK__QuestionT__Quest__51300E55");

                    b.Navigation("QuestionTemplatesDetail");
                });

            modelBuilder.Entity("Web.DbConnection.QuestionTemplatesDetail", b =>
                {
                    b.HasOne("Web.DbConnection.QuestionTemplate", "QuestionTemplate")
                        .WithMany("QuestionTemplatesDetails")
                        .HasForeignKey("QuestionTemplateId")
                        .IsRequired()
                        .HasConstraintName("FK__question___quest__31B762FC");

                    b.Navigation("QuestionTemplate");
                });

            modelBuilder.Entity("Web.DbConnection.Rating", b =>
                {
                    b.HasOne("Web.DbConnection.User", "Rater")
                        .WithMany("RatingRaters")
                        .HasForeignKey("RaterId")
                        .HasConstraintName("FK__Ratings__rater_i__1BC821DD");

                    b.HasOne("Web.DbConnection.User", "Supporter")
                        .WithMany("RatingSupporters")
                        .HasForeignKey("SupporterId")
                        .HasConstraintName("FK__Ratings__support__1CBC4616");

                    b.Navigation("Rater");

                    b.Navigation("Supporter");
                });

            modelBuilder.Entity("Web.DbConnection.Tool", b =>
                {
                    b.HasOne("Web.DbConnection.User", "Seller")
                        .WithMany("Tools")
                        .HasForeignKey("SellerId")
                        .HasConstraintName("FK__Tools__seller_id__1DB06A4F");

                    b.HasOne("Web.DbConnection.ToolCategory", "ToolCategory")
                        .WithMany("Tools")
                        .HasForeignKey("ToolCategoryId")
                        .HasConstraintName("FK__Tools__tool_cate__1EA48E88");

                    b.Navigation("Seller");

                    b.Navigation("ToolCategory");
                });

            modelBuilder.Entity("Web.DbConnection.UserTool", b =>
                {
                    b.HasOne("Web.DbConnection.Tool", "Tool")
                        .WithMany("UserTools")
                        .HasForeignKey("ToolId")
                        .HasConstraintName("FK__User_Tool__tool___1F98B2C1");

                    b.HasOne("Web.DbConnection.User", "User")
                        .WithMany("UserTools")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__User_Tool__user___208CD6FA");

                    b.Navigation("Tool");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web.DbConnection.WithdrawalRequest", b =>
                {
                    b.HasOne("Web.DbConnection.Payment", "Payment")
                        .WithMany("WithdrawalRequests")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK__Withdrawa__payme__2180FB33");

                    b.HasOne("Web.DbConnection.User", "Supporter")
                        .WithMany("WithdrawalRequests")
                        .HasForeignKey("SupporterId")
                        .HasConstraintName("FK__Withdrawa__suppo__22751F6C");

                    b.Navigation("Payment");

                    b.Navigation("Supporter");
                });

            modelBuilder.Entity("Web.DbConnection.Assignment", b =>
                {
                    b.Navigation("Multimedia");
                });

            modelBuilder.Entity("Web.DbConnection.Conversation", b =>
                {
                    b.Navigation("ConversationMembers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Web.DbConnection.Course", b =>
                {
                    b.Navigation("Multimedia");
                });

            modelBuilder.Entity("Web.DbConnection.MarkReport", b =>
                {
                    b.Navigation("Multimedia");
                });

            modelBuilder.Entity("Web.DbConnection.Message", b =>
                {
                    b.Navigation("MessageReadStatuses");

                    b.Navigation("Multimedia");
                });

            modelBuilder.Entity("Web.DbConnection.ParentComment", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Web.DbConnection.Payment", b =>
                {
                    b.Navigation("WithdrawalRequests");
                });

            modelBuilder.Entity("Web.DbConnection.Post", b =>
                {
                    b.Navigation("Multimedia");

                    b.Navigation("ParentComments");
                });

            modelBuilder.Entity("Web.DbConnection.PostCategory", b =>
                {
                    b.Navigation("Multimedia");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Web.DbConnection.QuestionTemplate", b =>
                {
                    b.Navigation("QuestionTemplatesDetails");
                });

            modelBuilder.Entity("Web.DbConnection.QuestionTemplatesDetail", b =>
                {
                    b.Navigation("Multimedia");

                    b.Navigation("QuestionTemplateDetailQaids");
                });

            modelBuilder.Entity("Web.DbConnection.Tool", b =>
                {
                    b.Navigation("Purchases");

                    b.Navigation("UserTools");
                });

            modelBuilder.Entity("Web.DbConnection.ToolCategory", b =>
                {
                    b.Navigation("Tools");
                });

            modelBuilder.Entity("Web.DbConnection.User", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Comments");

                    b.Navigation("ConversationMembers");

                    b.Navigation("Conversations");

                    b.Navigation("Courses");

                    b.Navigation("MarkReports");

                    b.Navigation("MessageReadStatuses");

                    b.Navigation("Messages");

                    b.Navigation("Multimedia");

                    b.Navigation("Notifications");

                    b.Navigation("ParentComments");

                    b.Navigation("Payments");

                    b.Navigation("PostReceivers");

                    b.Navigation("PostUsers");

                    b.Navigation("Purchases");

                    b.Navigation("RatingRaters");

                    b.Navigation("RatingSupporters");

                    b.Navigation("Tools");

                    b.Navigation("UserTools");

                    b.Navigation("WithdrawalRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
